{
  "Header": {
    "_": [
      " It requires vsSolutionBuildEvent engine.",
      " Free plugin for Visual Studio or MSBuild Tools:",
      "  * https://github.com/3F/vsSolutionBuildEvent",
      "  * https://visualstudiogallery.msdn.microsoft.com/0d1dbfd7-ed8a-40af-ae39-281bfeca2334/",
      " Feedback: github.com/3F  or entry.reg@gmail.com"
    ],
    "Compatibility": "0.9"
  },
  "Components": [
    {
      "ClassName": "InternalComponent",
      "Enabled": true
    },
    {
      "ClassName": "UserVariableComponent",
      "Enabled": true
    },
    {
      "ClassName": "TryComponent",
      "Enabled": true
    },
    {
      "ClassName": "OwpComponent",
      "Enabled": true
    },
    {
      "ClassName": "NuGetComponent",
      "Enabled": true
    },
    {
      "ClassName": "FunctionComponent",
      "Enabled": true
    },
    {
      "ClassName": "FileComponent",
      "Enabled": true
    },
    {
      "ClassName": "DteComponent",
      "Enabled": true
    },
    {
      "ClassName": "BuildComponent",
      "Enabled": true
    },
    {
      "ClassName": "BoxComponent",
      "Enabled": true
    },
    {
      "ClassName": "SevenZipComponent",
      "Enabled": true
    },
    {
      "ClassName": "ConditionComponent",
      "Enabled": true
    },
    {
      "ClassName": "EvMSBuildComponent",
      "Enabled": true
    },
    {
      "ClassName": "CommentComponent",
      "Enabled": true
    }
  ],
  "PreBuild": [
    {
      "Enabled": true,
      "Name": "ActDef",
      "Caption": "Prepare data",
      "SupportMSBuild": true,
      "SupportSBEScripts": true,
      "IgnoreIfBuildFailed": false,
      "BuildType": "Common",
      "Confirmation": false,
      "ToConfiguration": [],
      "ExecutionOrder": {
        "$type": "net.r_eg.vsSBE.Events.ExecutionOrder[], vsSolutionBuildEvent",
        "$values": []
      },
      "Process": {
        "$type": "net.r_eg.vsSBE.Events.EventProcess, vsSolutionBuildEvent",
        "Waiting": true,
        "Hidden": true,
        "TimeLimit": 30
      },
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeScript, vsSolutionBuildEvent",
        "Type": "Script",
        "Command": "#[$(dbin = \"bin/$(Configuration)/\")]\n\n#[( $(Configuration.Substring(1, 3)) == \"CI_\" ) { \n    $(isCIBuild = 'true')\n}else{ \n    $(isCIBuild = 'false')\n}]\n\n$(revDeltaBase  = \"2019/09/09\")\n$(revDeltaMin   = $([System.Math]::Pow(10, 3)))\n$(revDeltaMax   = 65534) #[\" limit of AssemblyVersion - 65534 max allowed ! that is 65536 (0-65535) is not a correct range, (2^16 - 2) \"]\n\n$(pDir  = \"E-MSBuild\")\n$(odir  = \"$(dbin)raw\")\n\n#[var +revBuild]\n#[var +bSha1]\n#[var +bName]\n#[var +bRevc]\n\n#[var pVer = #[File get(\".version\")]]\n\n#[var pRelVer   = #[File get(\".release.version\")]]\n#[$(pRelVer     = $(pRelVer.Trim()))]\n\n#[( $(pRelVer) == \"\" ) {\n    $(postfixRel  = \"\")\n} else {\n    $(postfixRel  = \"-$(pRelVer)\")\n}]\n\n#[IO delete.directory(\"$(dbin)\", true)]\n#[IO copy.directory(\"\", \"$(dbin)\", true)]\n\n",
        "Command__": [
          "#[$(dbin = \"bin/$(Configuration)/\")]",
          "",
          "#[( $(Configuration.Substring(1, 3)) == \"CI_\" ) { ",
          "    $(isCIBuild = 'true')",
          "}else{ ",
          "    $(isCIBuild = 'false')",
          "}]",
          "",
          "$(revDeltaBase  = \"2019/09/09\")",
          "$(revDeltaMin   = $([System.Math]::Pow(10, 3)))",
          "$(revDeltaMax   = 65534) #[\" limit of AssemblyVersion - 65534 max allowed ! that is 65536 (0-65535) is not a correct range, (2^16 - 2) \"]",
          "",
          "$(pDir  = \"E-MSBuild\")",
          "$(odir  = \"$(dbin)raw\")",
          "",
          "#[var +revBuild]",
          "#[var +bSha1]",
          "#[var +bName]",
          "#[var +bRevc]",
          "",
          "#[var pVer = #[File get(\".version\")]]",
          "",
          "#[var pRelVer   = #[File get(\".release.version\")]]",
          "#[$(pRelVer     = $(pRelVer.Trim()))]",
          "",
          "#[( $(pRelVer) == \"\" ) {",
          "    $(postfixRel  = \"\")",
          "} else {",
          "    $(postfixRel  = \"-$(pRelVer)\")",
          "}]",
          "",
          "#[IO delete.directory(\"$(dbin)\", true)]",
          "#[IO copy.directory(\"\", \"$(dbin)\", true)]",
          "",
          ""
        ]
      }
    },
    {
      "Enabled": true,
      "Name": "ActSub",
      "Caption": "Submodules and dep packages",
      "SupportMSBuild": true,
      "SupportSBEScripts": true,
      "IgnoreIfBuildFailed": false,
      "BuildType": "Common",
      "Confirmation": false,
      "ToConfiguration": [],
      "ExecutionOrder": {
        "$type": "net.r_eg.vsSBE.Events.ExecutionOrder[], vsSolutionBuildEvent",
        "$values": []
      },
      "Process": {
        "$type": "net.r_eg.vsSBE.Events.EventProcess, vsSolutionBuildEvent",
        "Waiting": true,
        "Hidden": true,
        "TimeLimit": 30
      },
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeScript, vsSolutionBuildEvent",
        "Type": "Script",
        "Command": "#[( !(#[IO exists.file(\"Varhead/Varhead.sln\")]) )\n{\n    #[File call(\"git\", \"submodule update --init --recursive Varhead\", 1000)]\n}]\n\n#[\" Packages \"]\n\n#[( !(#[IO exists.file(\"packages/__checked\")]) )\n{\n    #[File call(\"tools\\hmsbuild.bat\", \"-t:restore /v:q /nologo /p:Configuration=$(Configuration) /p:Platform=\\\"Any CPU\\\"\", 1000)]\n    \n    #[IO copy.directory(\"\", \"packages/\", true)]\n    #[File write(\"packages/__checked\"): ]\n}]",
        "Command__": [
          "#[( !(#[IO exists.file(\"Varhead/Varhead.sln\")]) )",
          "{",
          "    #[File call(\"git\", \"submodule update --init --recursive Varhead\", 1000)]",
          "}]",
          "",
          "#[\" Packages \"]",
          "",
          "#[( !(#[IO exists.file(\"packages/__checked\")]) )",
          "{",
          "    #[File call(\"tools\\hmsbuild.bat\", \"-t:restore /v:q /nologo /p:Configuration=$(Configuration) /p:Platform=\\\"Any CPU\\\"\", 1000)]",
          "    ",
          "    #[IO copy.directory(\"\", \"packages/\", true)]",
          "    #[File write(\"packages/__checked\"): ]",
          "}]"
        ]
      }
    },
    {
      "Enabled": true,
      "Name": "ActVersion",
      "Caption": "Update Version",
      "SupportMSBuild": true,
      "SupportSBEScripts": true,
      "IgnoreIfBuildFailed": false,
      "BuildType": "Common",
      "Confirmation": false,
      "ToConfiguration": [],
      "ExecutionOrder": {
        "$type": "net.r_eg.vsSBE.Events.ExecutionOrder[], vsSolutionBuildEvent",
        "$values": []
      },
      "Process": {
        "$type": "net.r_eg.vsSBE.Events.EventProcess, vsSolutionBuildEvent",
        "Waiting": true,
        "Hidden": true,
        "TimeLimit": 30
      },
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeScript, vsSolutionBuildEvent",
        "Type": "Script",
        "Command": "#[($(isCIBuild)) \n{\n    #[var tBase     = $([System.DateTime]::Parse('$(revDeltaBase)').ToBinary())]\n    #[var tNow      = $([System.DateTime]::UtcNow.Ticks)]\n    #[var revBuild  = #[$(\n        [System.TimeSpan]::FromTicks('$(\n            [MSBuild]::Subtract($(tNow), $(tBase))\n        )')\n        .TotalMinutes.ToString('0')    \n    )]]\n                         \n    #[var revBuild  = #[$(\n    \n     [MSBuild]::Add(\n         $(revDeltaMin), \n         $([MSBuild]::Modulo(\n             $(revBuild), \n             $([MSBuild]::Subtract(\n                 $(revDeltaMax), $(revDeltaMin)\n              ))\n          ))\n      )\n      \n    )]]\n}\nelse{\n    #[$(revBuild = 0)]\n}]\n\n\n#[\" \n    Checking of the git to define sha1, branch name, etc.\n\"]\n#[($(isCIBuild) ) { #[var isGit = #[IO cmd(\"git rev-parse 2>&1\")]] }else{ #[var -isGit] }]\n#[( $(isGit) == \"\" )\n{\n    #[var bSha1 = #[IO sout(\"git\", \"rev-parse --short HEAD\")]]\n}\nelse {\n    #[$(bSha1 = '')]\n}]\n\n\n#[var tpl = // This code was generated by a vsSolutionBuildEvent. \n// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.\nnamespace net.r_eg.EvMSBuild\n{\n    using System;\n\n    public struct EvMSBuildVersion\n    {\n        public static readonly Version number = new Version(S_NUM_REV);\n\n        public const string S_NUM = \"#[$(pVer)]\";\n        public const string S_REV = \"#[$(revBuild)]\";\n\n        public const string S_NUM_REV = S_NUM + \".\" + S_REV;\n\n        public const string B_SHA1 = \"#[$(bSha1)]\";\n\n        internal const string S_PRODUCT = S_NUM_REV + \"$(postfixRel)\";\n        internal const string S_INFO    = S_PRODUCT + \"+\" + B_SHA1;\n    }\n}]\n\n#[$(pVerProd = \"$(pVer).$(revBuild)$(postfixRel)\")]\n#[$(pVerPrint = \"$(pVerProd)+$(bSha1)\")]\n\n#[File write(\"$(pDir)/EvMSBuildVersion.cs\"):#[var tpl]]\n\n\n#[IO replace.Regex(\"$(pDir)/E-MSBuild.csproj\", \"<Version>.+?</Version>\", \"<Version>$(pVer)</Version>\")]",
        "Command__": [
          "#[($(isCIBuild)) ",
          "{",
          "    #[var tBase     = $([System.DateTime]::Parse('$(revDeltaBase)').ToBinary())]",
          "    #[var tNow      = $([System.DateTime]::UtcNow.Ticks)]",
          "    #[var revBuild  = #[$(",
          "        [System.TimeSpan]::FromTicks('$(",
          "            [MSBuild]::Subtract($(tNow), $(tBase))",
          "        )')",
          "        .TotalMinutes.ToString('0')    ",
          "    )]]",
          "                         ",
          "    #[var revBuild  = #[$(",
          "    ",
          "     [MSBuild]::Add(",
          "         $(revDeltaMin), ",
          "         $([MSBuild]::Modulo(",
          "             $(revBuild), ",
          "             $([MSBuild]::Subtract(",
          "                 $(revDeltaMax), $(revDeltaMin)",
          "              ))",
          "          ))",
          "      )",
          "      ",
          "    )]]",
          "}",
          "else{",
          "    #[$(revBuild = 0)]",
          "}]",
          "",
          "",
          "#[\" ",
          "    Checking of the git to define sha1, branch name, etc.",
          "\"]",
          "#[($(isCIBuild) ) { #[var isGit = #[IO cmd(\"git rev-parse 2>&1\")]] }else{ #[var -isGit] }]",
          "#[( $(isGit) == \"\" )",
          "{",
          "    #[var bSha1 = #[IO sout(\"git\", \"rev-parse --short HEAD\")]]",
          "}",
          "else {",
          "    #[$(bSha1 = '')]",
          "}]",
          "",
          "",
          "#[var tpl = // This code was generated by a vsSolutionBuildEvent. ",
          "// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.",
          "namespace net.r_eg.EvMSBuild",
          "{",
          "    using System;",
          "",
          "    public struct EvMSBuildVersion",
          "    {",
          "        public static readonly Version number = new Version(S_NUM_REV);",
          "",
          "        public const string S_NUM = \"#[$(pVer)]\";",
          "        public const string S_REV = \"#[$(revBuild)]\";",
          "",
          "        public const string S_NUM_REV = S_NUM + \".\" + S_REV;",
          "",
          "        public const string B_SHA1 = \"#[$(bSha1)]\";",
          "",
          "        internal const string S_PRODUCT = S_NUM_REV + \"$(postfixRel)\";",
          "        internal const string S_INFO    = S_PRODUCT + \"+\" + B_SHA1;",
          "    }",
          "}]",
          "",
          "#[$(pVerProd = \"$(pVer).$(revBuild)$(postfixRel)\")]",
          "#[$(pVerPrint = \"$(pVerProd)+$(bSha1)\")]",
          "",
          "#[File write(\"$(pDir)/EvMSBuildVersion.cs\"):#[var tpl]]",
          "",
          "",
          "#[IO replace.Regex(\"$(pDir)/E-MSBuild.csproj\", \"<Version>.+?</Version>\", \"<Version>$(pVer)</Version>\")]"
        ]
      }
    },
    {
      "Enabled": true,
      "Name": "ActInfo",
      "Caption": "Compile info",
      "SupportMSBuild": true,
      "SupportSBEScripts": true,
      "IgnoreIfBuildFailed": false,
      "BuildType": "Common",
      "Confirmation": false,
      "ToConfiguration": [],
      "ExecutionOrder": {
        "$type": "net.r_eg.vsSBE.Events.ExecutionOrder[], vsSolutionBuildEvent",
        "$values": []
      },
      "Process": {
        "$type": "net.r_eg.vsSBE.Events.EventProcess, vsSolutionBuildEvent",
        "Waiting": true,
        "Hidden": true,
        "TimeLimit": 30
      },
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeScript, vsSolutionBuildEvent",
        "Type": "Script",
        "Command": "#[var buildInfo =  $([System.String]::Concat(\"  \"))\n    E-MSBuild #[$(pVerPrint)]\n    \n    \n    bSha1: #[$(bSha1)]\n    \n    Configuration: #[$(Configuration)]\n    \n    :: generated by a vsSolutionBuildEvent v#[$(vsSolutionBuildEvent)]\n]\n\n#[( $(isCIBuild) ) { \n    #[IO replace.Regex(\"$(pDir)/E-MSBuild.csproj\", \"<BuildInfoVSSBE>[\\s\\S]*?</BuildInfoVSSBE>\", \"<BuildInfoVSSBE>$(buildInfo)</BuildInfoVSSBE>\")]\n}else{\n    #[IO replace.Regex(\"$(pDir)/E-MSBuild.csproj\", \"<BuildInfoVSSBE>[\\s\\S]*?</BuildInfoVSSBE>\", \"<BuildInfoVSSBE></BuildInfoVSSBE>\")]\n}]",
        "Command__": [
          "#[var buildInfo =  $([System.String]::Concat(\"  \"))",
          "    E-MSBuild #[$(pVerPrint)]",
          "    ",
          "    ",
          "    bSha1: #[$(bSha1)]",
          "    ",
          "    Configuration: #[$(Configuration)]",
          "    ",
          "    :: generated by a vsSolutionBuildEvent v#[$(vsSolutionBuildEvent)]",
          "]",
          "",
          "#[( $(isCIBuild) ) { ",
          "    #[IO replace.Regex(\"$(pDir)/E-MSBuild.csproj\", \"<BuildInfoVSSBE>[\\s\\S]*?</BuildInfoVSSBE>\", \"<BuildInfoVSSBE>$(buildInfo)</BuildInfoVSSBE>\")]",
          "}else{",
          "    #[IO replace.Regex(\"$(pDir)/E-MSBuild.csproj\", \"<BuildInfoVSSBE>[\\s\\S]*?</BuildInfoVSSBE>\", \"<BuildInfoVSSBE></BuildInfoVSSBE>\")]",
          "}]"
        ]
      }
    }
  ],
  "PostBuild": [
    {
      "Enabled": true,
      "Name": "ActBinaries",
      "Caption": "Binaries & tools ...",
      "SupportMSBuild": true,
      "SupportSBEScripts": true,
      "IgnoreIfBuildFailed": true,
      "BuildType": "Common",
      "Confirmation": false,
      "ToConfiguration": [],
      "ExecutionOrder": {
        "$type": "net.r_eg.vsSBE.Events.ExecutionOrder[], vsSolutionBuildEvent",
        "$values": []
      },
      "Process": {
        "$type": "net.r_eg.vsSBE.Events.EventProcess, vsSolutionBuildEvent",
        "Waiting": true,
        "Hidden": true,
        "TimeLimit": 30
      },
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeScript, vsSolutionBuildEvent",
        "Type": "Script",
        "Command": "#[$(_targets = $(TargetFrameworks))]\n\n#[$(_loop = true)]\n#[Box iterate(i = 0; $(_loop); i += 1): #[try\n{\n    #[$(_target = $(_targets.Split(\";\")[$(i)]))]\n    \n    #[try\n    {\n        #[IO copy.file\n        (\n            \"$(pDir)/$(OutputPath:$(pDir))/$(_target)/*.*\", \n            \"$(odir)/bin/$(_target)/\", \n            true,\n            {\"*.json\"}\n        )]\n    }\n    catch(err, msg){ #[IO writeLine(STDERR): bin artefacts failed: #[$(msg)] ] }]    \n}\ncatch { $(_loop = false) }]]\n\n\n#[IO copy.file(\n    {\"License.txt\", \"3rd-party-NOTICES.txt\", \"Readme.md\", \"changelog.txt\", \".version\", \".release.version\"}, \n    \"$(odir)/\", true\n)]\n\n#[IO writeLine(\"$(odir)/build-info.txt\"):#[var buildInfo]]\n\n#[IO copy.file(\n    {\"tools/*.bat\"}, \n    \"$(odir)/tools/\", true\n)]\n",
        "Command__": [
          "#[$(_targets = $(TargetFrameworks))]",
          "",
          "#[$(_loop = true)]",
          "#[Box iterate(i = 0; $(_loop); i += 1): #[try",
          "{",
          "    #[$(_target = $(_targets.Split(\";\")[$(i)]))]",
          "    ",
          "    #[try",
          "    {",
          "        #[IO copy.file",
          "        (",
          "            \"$(pDir)/$(OutputPath:$(pDir))/$(_target)/*.*\", ",
          "            \"$(odir)/bin/$(_target)/\", ",
          "            true,",
          "            {\"*.json\"}",
          "        )]",
          "    }",
          "    catch(err, msg){ #[IO writeLine(STDERR): bin artefacts failed: #[$(msg)] ] }]    ",
          "}",
          "catch { $(_loop = false) }]]",
          "",
          "",
          "#[IO copy.file(",
          "    {\"License.txt\", \"3rd-party-NOTICES.txt\", \"Readme.md\", \"changelog.txt\", \".version\", \".release.version\"}, ",
          "    \"$(odir)/\", true",
          ")]",
          "",
          "#[IO writeLine(\"$(odir)/build-info.txt\"):#[var buildInfo]]",
          "",
          "#[IO copy.file(",
          "    {\"tools/*.bat\"}, ",
          "    \"$(odir)/tools/\", true",
          ")]",
          ""
        ]
      }
    },
    {
      "Enabled": true,
      "Name": "ActPack",
      "Caption": "",
      "SupportMSBuild": true,
      "SupportSBEScripts": true,
      "IgnoreIfBuildFailed": true,
      "BuildType": "Common",
      "Confirmation": false,
      "ToConfiguration": [],
      "ExecutionOrder": {
        "$type": "net.r_eg.vsSBE.Events.ExecutionOrder[], vsSolutionBuildEvent",
        "$values": []
      },
      "Process": {
        "$type": "net.r_eg.vsSBE.Events.EventProcess, vsSolutionBuildEvent",
        "Waiting": true,
        "Hidden": true,
        "TimeLimit": 30
      },
      "Mode": {
        "$type": "net.r_eg.vsSBE.Events.ModeScript, vsSolutionBuildEvent",
        "Type": "Script",
        "Command": "##[( $(isCIBuild) )\n{\n    #[7z pack.directory(\"$(odir)\", \"$(dbin)\\\\E-MSBuild.$(pVerPrint).zip\")]\n}]\n\n#[IO copy.file(\n            \"$(pDir)/bin/$(Configuration)/*$(pVer)*\", \n            \"$(dbin)/\", \n            true, \n            {\"*.nuspec\"})]",
        "Command__": [
          "##[( $(isCIBuild) )",
          "{",
          "    #[7z pack.directory(\"$(odir)\", \"$(dbin)\\\\E-MSBuild.$(pVerPrint).zip\")]",
          "}]",
          "",
          "#[IO copy.file(",
          "            \"$(pDir)/bin/$(Configuration)/*$(pVer)*\", ",
          "            \"$(dbin)/\", ",
          "            true, ",
          "            {\"*.nuspec\"})]"
        ]
      }
    }
  ],
  "CancelBuild": [],
  "WarningsBuild": [],
  "ErrorsBuild": [],
  "OWPBuild": [],
  "Transmitter": [],
  "CommandEvent": [],
  "Logging": [],
  "SlnOpened": [],
  "SlnClosed": []
}